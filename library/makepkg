#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# (c) 2015, Ross Williams <http://github.com/gunzy83>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: makepkg
short_description: Build and install packages with I(makepkg) and I(pacman)
description:
    - Build  packages with the I(makepkg) and install with I(pacman) package manager, which is used by
      Arch Linux and its variants.
version_added: "1.8.2"
author: Ross Williams
notes: []
requirements: [base-devel]
options:
    name:
        description:
            - Name of the AUR package to build and install or remove. Can also 
              be the path to a source package to be built.
        required: true
        default: null

    state:
        description:
            - Desired state of the package.
        required: true
        default: "present"
        choices: ["present", "absent"]

    recurse:
        description:
            - When removing a package, also remove its dependencies, provided
              that they are not required by other packages and were not
              explicitly installed by a user.
        required: false
        default: "no"
        choices: ["yes", "no"]

    as_deps:
        description:
            - Whether or not to install the package with the **--asdeps** flag. 
              Useful for installing optional or AUR dependencies of AUR packages.
        required: false
        default: "no"
        choices: ["yes", "no"]

    build_dir:
        description:
            - Directory to extract source tarball for building the package
        required: false
        default: "/var/cache/pacman/pkg"
'''

EXAMPLES = '''
# Build and Install package aurvote
- makepkg: name=aurvote state=present

# Remove package aurvote
- makepkg: name=aurvote state=absent

# Recursively remove package aurvote
- makepkg: name=aurvote state=absent recurse=yes

# Build and Install package aurvote as a dependency
- makepkg: name=aurvote state=present as_deps=yes

# Build in a custom build directory
- makepkg: name=aurvote state=present build_dir="~/builds"
'''

import json
import shlex
import os
import re
import sys
import pwd
import grp
import shutil
import urllib2

PACMAN_PATH = "/usr/bin/pacman"
MAKEPKG_PATH = "/usr/bin/makepkg"
PACKAGE_CACHE = "/var/cache/pacman/pkg"

def query_package_dir(module, name, version):
    
    matcher = re.compile('%s-%s[\.xany0-9_-]*\.pkg\.tar\.xz$' % (name,version))
    for filename in os.listdir(PACKAGE_CACHE):
        if matcher.match(filename):
            return os.path.join(PACKAGE_CACHE,filename)

    return None

def query_package(module, name):
    # pacman -Q returns 0 if the package is installed,
    # 1 if it is not installed
    cmd = "pacman -Q %s" % (name)
    rc, stdout, stderr = module.run_command(cmd, check_rc=False)

    if rc == 0:
        return True

    return False 

def remove_package(module, package):
    # Query the package first, to see if we even need to remove
    if not query_package(module, package):
        module.exit_json(changed=False, msg="package(s) already absent")

    if module.params["recurse"]:
        args = "Rs"
    else:
        args = "R"

    cmd = "pacman -%s %s --noconfirm" % (args, package)
    rc, stdout, stderr = module.run_command(cmd, check_rc=False)

    if rc != 0:
        module.fail_json(msg="failed to remove %s" % (package))

    remove_msg = "removed package %s" % (package)
    module.exit_json(changed=True, msg=remove_msg)

   
def prepare_build_dir(module, package_name, sudo_user):
    build_dir = module.params['build_dir']
    uid = pwd.getpwnam(sudo_user).pw_uid
    gid = grp.getgrnam('users').gr_gid

    directory = os.path.join(build_dir,package_name)
    if not os.path.exists(directory):
        try:
            os.mkdir(directory,0755)
        except OSError:
            module.fail_json(msg="failed to create build directory %s" % (directory))

    if os.stat(directory).st_uid != uid:
        try:
            os.chown(directory,uid,gid)
        except OSError as e:
            module.fail_json(msg="failed to change owner of build directory %s" % (e.strerror))

    return directory

def make_package(module, package, package_file):
    sudo_user = os.environ.get('SUDO_USER')

    # Build as user, not as root
    command_prefix = "sudo -u %s " % sudo_user

    build_dir = prepare_build_dir(module, package, sudo_user)
    makepkg_filename = os.path.join(build_dir, "PKGBUILD")

    cmd = ""
    if package_file:
        #copy file
        cmd = "%scp %s ./%s.tar.gz" % (command_prefix, package_file, package)
    elif not os.path.exists(makepkg_filename):
        cmd = "%sgit clone --depth=1 https://aur.archlinux.org/%s.git ." % (command_prefix, package)

    if cmd != "":
        rc, stdout, stderr = module.run_command(cmd, check_rc=False, cwd=build_dir)
        if rc != 0:
            module.fail_json(msg="failed to clone git repository for package %s" % (package))

    if package_file:
        cmd = '%star --strip-components=1 -xf %s.tar.gz' % (command_prefix, package)
        rc, stdout, stderr = module.run_command(cmd, check_rc=False, cwd=build_dir)
        if rc != 0:
            module.fail_json(msg="failed to extract tarball for package %s" % (package))

    cmd = '%smakepkg -scf --noconfirm' % (command_prefix)
    rc, stdout, stderr = module.run_command(cmd, check_rc=False, cwd=build_dir)
    if rc != 0:
        module.fail_json(msg="failed to build package %s in %s. stderr: %s" % (package, build_dir, stderr)) 
    
    found_file = None
    matcher = re.compile('%s-.*\.pkg\.tar\.xz$' % package)
    for filename in os.listdir(build_dir):
        # check if filename not found, if not we need to fail out
        if matcher.match(filename):
            found_file = filename

    if not found_file:
        module.fail_json(msg="failed to find the built package for package %s" % package)

    # Keep package in cache for downgrades later
    cmd = 'sudo cp %s %s' % (found_file, PACKAGE_CACHE)
    rc, stdout, stderr = module.run_command(cmd, check_rc=False, cwd=build_dir)
    if rc != 0:
        module.fail_json(msg="failed to copy package %s to cache directory %s." % (found_file, output_dir))

    # Don't leave build files lying around
    try:
        shutil.rmtree(build_dir)
    except error:
        module.fail_json(msg="failed to remove temporary build directory %s" % (build_dir))

    return os.path.join(PACKAGE_CACHE,found_file)


def check_build_environment(module):
    
    user = os.environ.get('USER')
    sudo_user = os.environ.get('SUDO_USER')
    build_dir = module.params['build_dir']

    # We want to build as user, not as root
    if not sudo_user:
        module.fail_json(msg="building as root not permitted, run as user and use sudo")

    # Check if we need to be able to install package and fail out if we can't
    if user == 'root':
        module.fail_json(msg="cannot use makepkg as root")

    if not os.path.exists(build_dir):
        module.fail_json(msg="base build directory %s does not exist" % build_dir)

def install_package(module, package, package_file, version):
    sudo_user = os.environ.get('SUDO_USER')

    # Build as user, not as root
    command_prefix = "sudo -u %s " % sudo_user

    check_build_environment(module)
    
    if query_package(module, package):
        module.exit_json(changed=False, msg="package already installed")

    if not package_file:
        pkg_ver = version

        if not version:
          # this is an aur package
          content = urllib2.urlopen("https://aur.archlinux.org/rpc.php?type=info&arg=%s" % package)
          info = json.load(content)
          pkg_ver = info['results']['Version']

        # check pkg cache before install
        package_path = query_package_dir(module, package, pkg_ver)
        if not package_path:
            package_path = make_package(module, package, None)
    
    else:
        package_path = make_package(module, package, package_file)
    
    if module.params['as_deps']:
        params = '-U --asdeps %s' % package_path
    else:
        params = '-U %s' % package_path

    # User needs sudo privileges to be able to run pacman -U
    cmd = "sudo pacman %s --noconfirm" % (params)
    rc, stdout, stderr = module.run_command(cmd, check_rc=False)

    if rc != 0:
        module.fail_json(msg="failed to install %s %s %s" % (package, command_prefix, package_path))

    module.exit_json(changed=True, msg="installed package %s" % package)

def check_package(module, package, state):
    changed = False
    installed = query_package(module, package)
    if (state == "present" and not installed):
        # if the build would fail because of the state of the system we want to know
        check_build_environment(module)
        state = "installed"
        changed = True

    if (state == "absent" and installed):
        state = "removed"
        changed = True

    if changed:
        module.exit_json(changed=True, msg="package %s would be %s" % (package, state))
    else:
        module.exit_json(changed=False, msg="package %s already %s" % (package, state))


def main():    

    module = AnsibleModule(
        argument_spec    = dict(
            name         = dict(aliases=['pkg'], required=True),
            state        = dict(choices=['installed', 'present', 'absent', 'removed'], required=True),
            recurse      = dict(default='no', choices=BOOLEANS, type='bool'),
            as_deps      = dict(default='no', choices=BOOLEANS, type='bool'),
            build_dir    = dict(default=PACKAGE_CACHE)),
        required_one_of = [['name']],
        supports_check_mode = True)

    if not os.path.exists(PACMAN_PATH):
        module.fail_json(msg="cannot find pacman, looking for %s" % (PACMAN_PATH))
    if not os.path.exists(MAKEPKG_PATH):
        module.fail_json(msg="cannot find makepkg, looking for %s" % (MAKEPKG_PATH))

    p = module.params

    # normalize the state parameter
    if p['state'] in ['present', 'installed']:
        p['state'] = 'present'
    elif p['state'] in ['absent', 'removed']:
        p['state'] = 'absent'

    pkg = p['name']
    pkg_file = None
    if pkg.endswith('.tar.gz'):
        # The package given is a filename, extract the raw pkg name from
        # it and store the filename
        pkg_file = pkg
        pkg = re.sub('[-.].*$', '', pkg.split('/')[-1])
     
    if module.check_mode:
        check_package(module, pkg, p['state'])

    version = None
    sudo_user = os.environ.get('SUDO_USER')
    build_dir = prepare_build_dir(module, pkg, sudo_user)
    makepkg_filename = os.path.join(build_dir, "PKGBUILD")

    if os.path.exists(makepkg_filename):
      with open(makepkg_filename) as f:
        for line in f:
          if '=' not in line: continue
          key, value = line.split('=', 1)
          if key == 'pkgver':
            version = value
            break

    if p['state'] == 'present':
        install_package(module, pkg, pkg_file, version)
    elif p['state'] == 'absent':
        remove_package(module, pkg)


# import module snippets
from ansible.module_utils.basic import *
    
main()
